{
  "info": {
    "name": "Bank API - E2E Tests",
    "description": "Comprehensive end-to-end test suite for Bank API covering user management, authentication, accounts, and transactions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. User Registration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201 or 409 (user already exists)', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
              "});",
              "",
              "// Only validate details if user was created successfully",
              "if (pm.response.code === 201) {",
              "    pm.test('Response has user ID', function () {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData.id).to.exist;",
              "        pm.expect(jsonData.id).to.match(/^usr-[A-Za-z0-9]+$/);",
              "    });",
              "",
              "    pm.test('User details match request', function () {",
              "        var jsonData = pm.response.json();",
              "        pm.expect(jsonData.name).to.eql('John Doe');",
              "        pm.expect(jsonData.email).to.eql('john.doe@example.com');",
              "        pm.expect(jsonData.phoneNumber).to.eql('+447700900123');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phoneNumber\": \"+447700900123\",\n  \"address\": {\n    \"line1\": \"123 Main Street\",\n    \"line2\": \"Apartment 4B\",\n    \"town\": \"London\",\n    \"county\": \"Greater London\",\n    \"postcode\": \"SW1A 1AA\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users"]
        }
      },
      "response": []
    },
    {
      "name": "2. User Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has JWT token and userId', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.token).to.exist;",
              "    pm.expect(jsonData.token).to.be.a('string');",
              "    pm.expect(jsonData.userId).to.exist;",
              "    pm.expect(jsonData.userId).to.match(/^usr-[A-Za-z0-9]+$/);",
              "    ",
              "    // Set userId from login response (handles case where registration failed with 409)",
              "    pm.collectionVariables.set('userId', jsonData.userId);",
              "    pm.collectionVariables.set('authToken', jsonData.token);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "3. Fetch User Details",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User details are correct', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('userId'));",
              "    pm.expect(jsonData.name).to.eql('John Doe');",
              "    pm.expect(jsonData.email).to.eql('john.doe@example.com');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users", "{{userId}}"]
        }
      },
      "response": []
    },
    {
      "name": "4. Update User Details",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User phone number updated', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.phoneNumber).to.eql('+447700900999');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"phoneNumber\": \"+447700900999\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "users", "{{userId}}"]
        }
      },
      "response": []
    },
    {
      "name": "5. Create Bank Account",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Account created with correct details', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.accountNumber).to.exist;",
              "    pm.expect(jsonData.accountNumber).to.match(/^01\\d{6}$/);",
              "    pm.expect(jsonData.sortCode).to.eql('10-10-10');",
              "    pm.expect(jsonData.name).to.eql('Personal Savings');",
              "    pm.expect(jsonData.accountType).to.eql('personal');",
              "    pm.expect(jsonData.balance).to.eql(0);",
              "    pm.expect(jsonData.currency).to.eql('GBP');",
              "    pm.collectionVariables.set('accountNumber', jsonData.accountNumber);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Personal Savings\",\n  \"accountType\": \"personal\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/accounts",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts"]
        }
      },
      "response": []
    },
    {
      "name": "6. List Accounts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Accounts list contains created account', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.accounts).to.be.an('array');",
              "    pm.expect(jsonData.accounts.length).to.be.at.least(1);",
              "    var account = jsonData.accounts.find(a => a.accountNumber === pm.collectionVariables.get('accountNumber'));",
              "    pm.expect(account).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts"]
        }
      },
      "response": []
    },
    {
      "name": "7. Fetch Account Details",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Account details are correct', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.accountNumber).to.eql(pm.collectionVariables.get('accountNumber'));",
              "    pm.expect(jsonData.name).to.eql('Personal Savings');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}"]
        }
      },
      "response": []
    },
    {
      "name": "8. Deposit Money",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Transaction created successfully', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.exist;",
              "    pm.expect(jsonData.id).to.match(/^tan-[A-Za-z0-9]+$/);",
              "    pm.expect(jsonData.type).to.eql('deposit');",
              "    pm.expect(jsonData.amount).to.eql(500);",
              "    pm.expect(jsonData.reference).to.eql('Initial deposit');",
              "    pm.collectionVariables.set('depositTransactionId', jsonData.id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 500.00,\n  \"currency\": \"GBP\",\n  \"type\": \"deposit\",\n  \"reference\": \"Initial deposit\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}/transactions",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}", "transactions"]
        }
      },
      "response": []
    },
    {
      "name": "9. Verify Balance After Deposit",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance updated correctly', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.eql(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}"]
        }
      },
      "response": []
    },
    {
      "name": "10. Withdraw Money",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Withdrawal transaction created', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.exist;",
              "    pm.expect(jsonData.type).to.eql('withdrawal');",
              "    pm.expect(jsonData.amount).to.eql(100);",
              "    pm.collectionVariables.set('withdrawalTransactionId', jsonData.id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 100.00,\n  \"currency\": \"GBP\",\n  \"type\": \"withdrawal\",\n  \"reference\": \"ATM withdrawal\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}/transactions",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}", "transactions"]
        }
      },
      "response": []
    },
    {
      "name": "11. Verify Balance After Withdrawal",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance updated correctly', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.eql(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}"]
        }
      },
      "response": []
    },
    {
      "name": "12. Test Insufficient Funds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 422', function () {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test('Error message indicates insufficient funds', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 10000.00,\n  \"currency\": \"GBP\",\n  \"type\": \"withdrawal\",\n  \"reference\": \"Should fail - insufficient funds\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}/transactions",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}", "transactions"]
        }
      },
      "response": []
    },
    {
      "name": "13. List Transactions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Transactions list contains both transactions', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.transactions).to.be.an('array');",
              "    pm.expect(jsonData.transactions.length).to.eql(2);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}/transactions",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}", "transactions"]
        }
      },
      "response": []
    },
    {
      "name": "14. Fetch Specific Transaction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Transaction details are correct', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('depositTransactionId'));",
              "    pm.expect(jsonData.type).to.eql('deposit');",
              "    pm.expect(jsonData.amount).to.eql(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}/transactions/{{depositTransactionId}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}", "transactions", "{{depositTransactionId}}"]
        }
      },
      "response": []
    },
    {
      "name": "15. Update Account Name",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Account name updated', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.name).to.eql('Updated Savings Account');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Updated Savings Account\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}"]
        }
      },
      "response": []
    },
    {
      "name": "16. Test Delete Account With Balance (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 409', function () {",
              "    pm.response.to.have.status(409);",
              "});",
              "",
              "pm.test('Error message indicates account has balance', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/accounts/{{accountNumber}}",
          "host": ["{{baseUrl}}"],
          "path": ["v1", "accounts", "{{accountNumber}}"]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "accountNumber",
      "value": "",
      "type": "string"
    },
    {
      "key": "depositTransactionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "withdrawalTransactionId",
      "value": "",
      "type": "string"
    }
  ]
}